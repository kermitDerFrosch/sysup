#!/bin/bash

function cleanup() {
  [ -f $LOCKFILE ] && rm -f "$LOCKFILE"
  CLEANED=1
}

CLEANED=0
NOSYNC=0
NOPORTAGE=0
NOREBUILD=0
NOCLEAN=0
QUIET=0
NOUPDATE=0
FIXPERL=0
RESUME=0
NOASK=0
SKIPFIRST=0

[ ! -f /etc/sysup/sysup.conf ] && (echo "Config not found"; exit 1)

. /etc/sysup/sysup.conf


function usage() {
  echo -e "$0 [-nc] [-ns] [-np] [-nr] [-fp] [-r] [-q] [-na]\n"
  echo "Options:"
  echo "    --noclean, -nc     - skip clean phase"
  echo "    --nosync, -ns      - skip sync phase"
  echo "    --noportage, -np   - skip portage update phase"
  echo "    --norebuild, -nr   - skip rebuild phase"
  echo "    --noask, -na       - don't ask"
  echo "    --quiet, -q        - hide output"
  echo
  echo "    --fixperl, -fp     - fix perl"
  echo "    --resume, -r       - resume"
  echo "    --skipfirst, -sf   - skip first"
  exit 0
}
PARAMS="$@"
while [ "$1x" != "x" ];do
  var="${1^^}"
  if [ "x${1:0:2}" != "x--" ];then
    if [ "x${1:0:1}" != "x-" ];then
      echo "unknown argument: $1"
      exit 1
    fi
    var="${var:1}"
  else
    var="${var:2}"
  fi
  case "${var}" in
    NOSYNC|NS)
      NOSYNC=1
      ;;
    NOASK|NA)
      NOASK=1
      ;;
    QUIET|Q)
      QUIET=1
      ;;
    NOPORTAGE|NP)
      NOPORTAGE=1
      ;;
    NOREBUILD|NR)
      NOREBUILD=1
      ;;
    NOCLEAN|NC)
      NOCLEAN=1
      ;;
    HELP|H)
      usage
      ;;
    FIXPERL|FP)
      NOSYNC=1
      NOPORTAGE=1
      NOREBUILD=1
      NOCLEAN=1
      FIXPERL=1
      NOUPDATE=1
      break;
      ;;
    RESUME|R)
      NOSYNC=1
      NOPORTAGE=1
      NOREBUILD=0
      NOCLEAN=0
      NOUPDATE=1
      RESUME=1
      break;
      ;;
    SKIPFIRST|SF)
      SKIPFIRST=1
      ;;
    *)
      echo "wrong parameter: $var"
      exit 2
      ;;
  esac
  shift
done

if [ -f "$LOCKFILE" ]; then
  echo "Update is running (PID:`cat $LOCKFILE`)"
  exit 1
fi

[ $EUID -ne 0 ] && exec sudo "$0" $PARAMS

trap cleanup EXIT INT TERM

echo $$ > "$LOCKFILE"

declare -A TIMES
declare -A RC
declare -a PARTS
declare -A CMDS
declare -A ERROR_MESSAGE
declare -A PARTNAMES

function printDuration() {
  local totaltime=0
  local MAX=0
  for TIME in ${TIMES[@]};do
    let totaltime=totaltime+TIME
  done
  for NAME in ${PARTNAMES[@]};do
    if [ $MAX -lt ${#NAME} ];then
      MAX=${#NAME}
    fi
  done

  echo
  local -A LEN
  for PART in ${PARTS[@]};do
    if [[ ${TIMES[$PART]} > 0 ]];then
      local len
      local offset
      local offset2
      LEN[$PART]=${#PARTNAMES[$PART]}

      if [ ${LEN[$PART]} -gt 8 ]; then
        let len=${LEN[$PART]}+2
      else
        len=10
      fi

      let offset=($len-${LEN[$PART]})/2
      if [ $((${LEN[$PART]}%2)) -eq 0 ];then
        offset2=$offset
      else
        let offset2=offset+1
      fi
      printf "\e[4m%${offset}s%s%${offset2}s" " " "${PARTNAMES[$PART]}" " " >&2
      if [[ "$PART" != "${PARTS[-1]}" ]];then
        printf "|" >&2
      fi
    fi
  done
  printf "\e[0m\n" >&2
  for PART in ${PARTS[@]};do
    if [[ ${TIMES[$PART]} > 0 ]];then
      local offset=1
      local offset2
      if [ ${LEN[$PART]} -gt 8 ];then
        let offset=(${LEN[$PART]}-6)/2
      fi
      if [[ $((${LEN[$PART]}%2)) -eq 0 ]];then
        offset2=$offset
      else
        let offset2=offset+1
      fi

      printf "%${offset}s" " " >&2
      DD=`date -u -d @${TIMES[$PART]} "+%H:%M:%S"`
      echo -ne "\e[1m$DD\e[0m" >&2
      printf "%${offset2}s" " " >&2
      if [[ "$PART" != "${PARTS[-1]}" ]];then
        echo -n "|" >&2
      fi
    fi
  done

  echo -ne "\n\nTotal: \e[1m" >&2
  date -u -d @$totaltime "+%-Hh %-Mm %-Ss" >&2
  echo -en "\e[0m"
}

function checkError() {
  if [ $1 != 0 ];then
    printDuration
    if [[ "x$2" != "x" ]];then
      echo -e "[\e[1;31mE\e[0m] $2 ($1)" >&2
    fi
    exit $1
  fi
}

function startSubProcess() {
  if [ $CLEANED -eq 1 ]; then
    return
  fi
  if [ ${CMDS[$3$1]+x} ];then
    if [ $QUIET -eq 1 ];then
      ${CMDS[$3$1]} 2>&1 >> "$2"
      RC[$3$1]=${PIPESTATUS[0]}
    else
      ${CMDS[$3$1]} 2>&1 | tee -ia "$2"
      RC[$3$1]=${PIPESTATUS[0]}
    fi
  fi
}

function processPart() {
  if [ $CLEANED -eq 1 ]; then
    return
  fi

  local endtime
  local starttime=`date  "+%s"`
  local LOGFILE="$LOGPATH/${1,,}.log"
  printf "\e[1m[%s - %s] Starting %s Phase\e[0m\n" "$(eval date +%d.%m.%Y)" "$(eval date +%R:%S)" "${PARTNAMES[$1]}" >&2
  printf "[%s - %s] Starting %s Phase\n" "$(eval date +%d.%m.%Y)" "$(eval date +%R:%S)" "${PARTNAMES[$1]}" >>$LOGFILE

  startSubProcess "$1" "$LOGFILE" "PRE"
  startSubProcess "$1" "$LOGFILE"
  startSubProcess "$1" "$LOGFILE" "POST"

  endtime=`date  "+%s"`
  let TIMES[$1]=endtime-starttime
  printf "[%s - %s] %s Phase Done\n" "$(eval date +%d.%m.%Y)" "$(eval date +%R:%S)" "${PARTNAMES[$1]}" >>$LOGFILE
  checkError ${RC[$1]} ${ERROR_MESSAGE[$1]}
}

if [ $NOSYNC -eq 0 ];then
  PARTS[${#PARTS[@]}]="SYNC"
fi
if [ $NOPORTAGE -eq 0 ];then
  PARTS[${#PARTS[@]}]="PORTAGE"
fi
if [ $NOUPDATE -eq 0 ];then
  PARTS[${#PARTS[@]}]="UPDATE"
fi
if [ $RESUME -eq 1 ];then
  PARTS[${#PARTS[@]}]="RESUME"
fi
if [ $NOREBUILD -eq 0 ];then
  PARTS[${#PARTS[@]}]="REBUILD"
fi
if [ $NOCLEAN -eq 0 ];then
  PARTS[${#PARTS[@]}]="CLEAN"
fi
if [ $FIXPERL -eq 1 ];then
  PARTS[${#PARTS[@]}]="FIXPERL"
fi
if [ $QUIET -eq 0 -a $NOASK -eq 0 ];then
  ASK=" -a"
fi
if [ $SKIPFIRST -eq 1 ];then
  RESUME_PARAMS="--skipfirst"
fi
. /etc/sysup/phase.conf

if [ ! -d "$LOGPATH" ];then
  mkdir "$LOGPATH"
fi

[ -f /etc/sysup/pre.sh ] && source /etc/sysup/pre.sh

for PART in ${PARTS[@]}; do
  if [ $CLEANED -eq 1 ]; then
    break
  fi
  processPart $PART
done

[ -f /etc/sysup/post.sh ] && source /etc/sysup/post.sh

printDuration
